@inject Microsoft.AspNetCore.Mvc.Localization.IViewLocalizer Localizer
@model CineTicket.Models.BookingViewModel

@{
    // JSON encode danh sách ghế đã đặt
    var bookedSeatsJson = Newtonsoft.Json.JsonConvert.SerializeObject(Model.AlreadyBookedSeats ?? new List<string>());
}

<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <title>@Localizer["SelectedSeat"] - @Model.MovieTitle</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet" />
	<link href="~/css/lightmode.css" rel="stylesheet" />
	<link href="~/css/indexbooking.css" rel="stylesheet" />
	<link href="~/css/dardmode.css" rel="stylesheet" />
</head>
<body>
    <div class="container py-5">
        <div class="theater-card mx-auto" style="max-width: 850px;">
            <h2 class="text-center mb-4">@Localizer["SelectedSeat"] - @Model.MovieTitle</h2>
            <div class="screen">@Localizer["SCREEN"]</div>

            <!-- Khu vực ghế -->
            <div class="seat-container" id="seat-container"></div>

            <!-- Chú thích -->
            <div class="legend">
                <span><div class="seat"></div>@Localizer["AvailableSeat"]</span>
                <span><div class="seat selected"></div>@Localizer["SelectedSeat"]</span>
                <span><div class="seat occupied"></div>@Localizer["BookedSeat"]</span>
            </div>

            <!-- Hiển thị tổng tiền -->
            <div class="total-section text-center">
                <h4>
                    @Localizer["Total"]:
                    <span id="total-price" class="text-primary">0</span> VND
                </h4>
                <button id="book-btn" class="btn btn-secondary mt-3" disabled>@Localizer["BookNow"]</button>
            </div>
        </div>
    </div>

    <!-- Form ẩn gửi dữ liệu -->
    <form id="booking-form" method="post" asp-action="ConfirmBooking">
        <input type="hidden" name="MovieId" value="@Model.MovieId" />
        <input type="hidden" name="MovieTitle" value="@Model.MovieTitle" />
        <input type="hidden" name="TicketPrice" value="@Model.TicketPrice" />
        <input type="hidden" name="ShowtimeId" value="@Model.ShowtimeId" />
        <input type="hidden" name="SeatNumbers" id="selected-seats" />
    </form>

    <script>
                        document.addEventListener("DOMContentLoaded", function () {
            const seatContainer = document.getElementById("seat-container");
            const totalPriceElement = document.getElementById("total-price");
            const bookButton = document.getElementById("book-btn");

            // Giá vé từ model
            const seatPrice = @Model.TicketPrice;
            const bookedSeats = @Html.Raw(bookedSeatsJson);

            // Mảng lưu các ghế đã chọn
            const selectedSeatsArray = [];

            // Render ghế
            const rowLabels = ['A', 'B', 'C', 'D', 'E'];
            rowLabels.forEach(row => {
                for (let col = 1; col <= 8; col++) {
                    const seatId = `${row}${col}`;

                    const seatElement = document.createElement("div");
                    seatElement.classList.add("seat");
                    seatElement.dataset.id = seatId;

                    const seatLabel = document.createElement("span");
                    seatLabel.classList.add("seat-label");
                    seatLabel.textContent = seatId;
                    seatElement.appendChild(seatLabel);

                    if (bookedSeats.includes(seatId)) {
                        seatElement.classList.add("occupied");
                    }

                    seatElement.addEventListener("click", () => {
                        if (seatElement.classList.contains("occupied")) return;

                        const index = selectedSeatsArray.indexOf(seatId);

                        if (index === -1) {
                            // Chọn ghế
                            selectedSeatsArray.push(seatId);
                            seatElement.classList.add("selected");
                        } else {
                            // Bỏ chọn ghế
                            selectedSeatsArray.splice(index, 1);
                            seatElement.classList.remove("selected");
                        }

                        console.log("Ghế đã chọn:", selectedSeatsArray);
                        updateTotal();
                    });

                    seatContainer.appendChild(seatElement);
                }
            });

            // Khởi tạo giá trị ban đầu
            totalPriceElement.textContent = "0";
            bookButton.disabled = true;

            function updateTotal() {
                const total = selectedSeatsArray.length * seatPrice;

                console.log("Số ghế đã chọn (từ mảng):", selectedSeatsArray.length);
                console.log("Danh sách ghế:", selectedSeatsArray.join(', '));
                console.log("Tổng tiền:", total);

                totalPriceElement.textContent = total.toLocaleString("vi-VN");

                bookButton.disabled = selectedSeatsArray.length === 0;
                bookButton.className = selectedSeatsArray.length > 0
                    ? "btn btn-primary mt-3"
                    : "btn btn-secondary mt-3";

                document.getElementById("selected-seats").value = selectedSeatsArray.join(',');
            }

            bookButton.addEventListener("click", () => {
                if (selectedSeatsArray.length === 0) {
                    alert("@Localizer["PleaseSelectSeat"]");
                    return;
                }
                document.getElementById("booking-form").submit();
            });
        });
	</script>
	<script src="~/js/movie.js"></script>
</body>
</html>
